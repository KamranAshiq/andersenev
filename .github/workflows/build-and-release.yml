name: Build and Release

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
    
    - name: Install dependencies
      run: npm ci
    
    - name: Extract current version
      id: version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        echo "major=$MAJOR" >> $GITHUB_OUTPUT
        echo "minor=$MINOR" >> $GITHUB_OUTPUT
        echo "patch=$PATCH" >> $GITHUB_OUTPUT
        
        NEW_MINOR=$((MINOR + 1))
        NEW_VERSION="$MAJOR.$NEW_MINOR.$PATCH"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "new_minor=$NEW_MINOR" >> $GITHUB_OUTPUT
    
    - name: Update package.json version
      run: |
        npm version ${{ steps.version.outputs.new_version }} --no-git-tag-version
        echo "Updated version to ${{ steps.version.outputs.new_version }}"
    
    - name: Update app.json version (if needed)
      run: |
        if grep -q "version" app.json; then
          sed -i "s/\"version\": \".*\"/\"version\": \"${{ steps.version.outputs.new_version }}\"/" app.json
        fi
    
    - name: Build Android APK
      run: |
        echo "Building Android APK..."
        cd android
        
        yes | sdkmanager --licenses || true
        
        ./gradlew assembleRelease
        
        echo "Android APK built successfully!"
        ls -la app/build/outputs/apk/release/
    
    - name: Verify APK Build
      run: |
        if [ -f "android/app/build/outputs/apk/release/app-release.apk" ]; then
          echo "✅ APK built successfully!"
          echo "APK size: $(du -h android/app/build/outputs/apk/release/app-release.apk | cut -f1)"
        else
          echo "❌ APK build failed - file not found"
          exit 1
        fi
    
    - name: iOS Build Comment (No Actual Build)
      run: |
        echo "📱 iOS Build Process (Commented Out)"
        echo "======================================"
        echo ""
        echo "For iOS builds, the following steps would be executed:"
        echo "1. Setup Xcode environment"
        echo "2. Install iOS dependencies (pod install)"
        echo "3. Build iOS app (.ipa file)"
        echo "4. Code signing and provisioning"
        echo "5. Upload to App Store Connect"
        echo ""
        echo "iOS build is currently disabled as per project requirements."
        echo "To enable iOS builds, uncomment the iOS build steps below:"
        echo ""
        echo "# iOS Build Steps (Currently Disabled):"
        echo "# - name: Setup Xcode"
        echo "#   uses: maxim-lobanov/setup-xcode@v1"
        echo "#   with:"
        echo "#     xcode-version: latest-stable"
        echo "#"
        echo "# - name: Install iOS dependencies"
        echo "#   run: cd ios && pod install"
        echo "#"
        echo "# - name: Build iOS app"
        echo "#   run: cd ios && xcodebuild -workspace andersenev.xcworkspace -scheme andersenev -configuration Release -destination generic/platform=iOS -archivePath andersenev.xcarchive archive"
        echo "#"
        echo "# - name: Export iOS app"
        echo "#   run: cd ios && xcodebuild -exportArchive -archivePath andersenev.xcarchive -exportPath . -exportOptionsPlist ExportOptions.plist"
    
    - name: Create release notes
      id: release_notes
      run: |
        echo "## Release ${{ steps.version.outputs.new_version }}" > release_notes.md
        echo "" >> release_notes.md
        echo "### Changes since ${{ steps.version.outputs.current_version }}" >> release_notes.md
        echo "" >> release_notes.md
        
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          git log --pretty=format:"- %s" $LAST_TAG..HEAD >> release_notes.md
        else
          git log --pretty=format:"- %s" -10 >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "### Build Information" >> release_notes.md
        echo "- Build Date: $(date -u)" >> release_notes.md
        echo "- Commit: ${{ github.sha }}" >> release_notes.md
        echo "- Branch: ${{ github.ref_name }}" >> release_notes.md
        echo "- Android APK: ✅ Built successfully" >> release_notes.md
        echo "- iOS Build: ⏸️ Disabled (commented out)" >> release_notes.md
    
    - name: Commit version bump
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add package.json app.json
        git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }} [skip ci]"
        
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        git push origin HEAD:master
    
    - name: Create Git Tag
      run: |
        git tag -a "v${{ steps.version.outputs.new_version }}" -m "Release ${{ steps.version.outputs.new_version }}"
        git push origin "v${{ steps.version.outputs.new_version }}"
    
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.new_version }}
        release_name: Release ${{ steps.version.outputs.new_version }}
        body_path: release_notes.md
        draft: false
        prerelease: false
    
    - name: Upload Android APK to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: android/app/build/outputs/apk/release/app-release.apk
        asset_name: andersenev-android-${{ steps.version.outputs.new_version }}.apk
        asset_content_type: application/vnd.android.package-archive
    
    - name: Notify external platforms
      run: |
        echo "Notifying external platforms about new Android release..."
        echo "Version: ${{ steps.version.outputs.new_version }}"
        echo "Release URL: ${{ steps.create_release.outputs.html_url }}"
        echo "APK: andersenev-android-${{ steps.version.outputs.new_version }}.apk"
    
    - name: Cleanup
      run: |
        rm -f release_notes.md
        echo "Build and release process completed successfully!"